{"mappings":"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","sources":["packages/mocyang-utils/src/querystring.js","packages/mocyang-utils/src/random.js","packages/mocyang-utils/src/index.js","packages/mocyang-model-controller/src/index.js"],"sourcesContent":["/**\n * @Author: MocYang\n * @Email: 958292256@qq.com\n * @Date: 2022/1/6 14:04\n * @File: querystring.js\n * @Description\n */\nimport { isPlainObject, isArray } from './index'\n\nclass Querystring {\n  parse(url = '') {\n    url = !url ? window.location.href : url\n\n    if (url.indexOf('?') === -1) {\n      return {}\n    }\n\n    let search = url[0] === '?' ? url.substr(1) : url.substring(url.lastIndexOf('?') + 1)\n    if (!search) {\n      return {}\n    }\n\n    search = search.split('&')\n    return Array.from(search).reduce((ret, cur) => {\n      const objKeyAndValuePair = cur.split('=')\n      let value = decodeURIComponent(objKeyAndValuePair[1])\n      /*\n       name=1,2,3 => name: [1, 2, 3]\n       */\n      if (value.indexOf(',') !== -1) {\n        value = value.split(',')\n      }\n      ret[objKeyAndValuePair[0]] = value\n      return ret\n    }, {})\n  }\n\n  stringify(url = '', params = {}) {\n    if (isPlainObject(params)) {\n      return `${url}?${Object.keys(params).reduce((ret, key) => {\n        let value = params[key]\n        /*\n         name=[1, 2, 3] => name=1,2,3\n         */\n        if (isArray(params[key])) {\n          value = value.reduce((acc, cur) => {\n            acc.push(cur)\n            return acc\n          }, []).join(',')\n        }\n        ret.push(`${key}=${encodeURIComponent(value)}`)\n        return ret\n      }, []).join('&')}`\n    }\n  }\n}\n\nexport default new Querystring()\n","/**\n * @Author: MocYang\n * @Email: 958292256@qq.com\n * @Date: 2022/1/6 13:55\n * @File: random.js\n * @Description\n */\nclass Random {\n  randomColor() {\n    return `#${(Math.random() * 0x10000000 << 0).toString(16).slice(-6)}`\n  }\n\n  randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  pick(valueArr) {\n    return valueArr[this.randomNumber(0, valueArr.length - 1)]\n  }\n}\n\nexport default new Random()\n","/**\n * @Author: MocYang\n * @Email: 958292256@qq.com\n * @Date: 2022/1/6 9:56\n * @File: index.js\n * @Description\n */\n\nimport debounce from './debounce'\nimport throttle from './throttle'\nimport querystring from './querystring'\nimport random from './random'\n\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\n  ? Object.freeze({})\n  : {}\n\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production')\n  ? Object.freeze([])\n  : []\n\nexport const NOOP = () => {\n}\n\nconst NO = () => false\n\nexport const extend = Object.assign\n\nexport const hasOwnProperty = Object.prototype.hasOwnProperty\nexport const hasOwn = (val, key) => hasOwnProperty.call(val, key)\n\nexport const objectToString = Object.prototype.toString\n\nexport const toTypeString = (value) => objectToString.call(value)\n\nexport const isPlainObject = (val) => toTypeString(val) === '[object Object]'\n\nexport const isArray = Array.isArray\n\nexport const isMap = (val) => toTypeString(val) === '[object Map]'\n\nexport const isSet = (val) => toTypeString(val) === '[object Set]'\n\nexport const isFunction = (val) => typeof val === 'function'\n\nexport const isObject = (val) => val !== null && typeof val === 'object'\n\nexport const isPromise = (val) => {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch)\n}\n\nexport const isData = (val) => val instanceof Date\n\nexport const isString = (val) => typeof val === 'string'\n\nexport const isSymbol = (val) => typeof val === 'symbol'\n\n// extract \"RawType\" from strings like \"[object RawType]\"\nexport const toRawType = (val) => toTypeString(val).slice(8, -1)\n\nexport const toNumber = (val) => {\n  const n = parseFloat(val)\n  return isNaN(n) ? val : n\n}\n\nexport const trim = (str) => str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '')\n\n/**\n * 立即执行回调，然后等待指定时间之后，执行后面的代码\n * @param time\n * @param cb\n * @returns {Promise<unknown>}\n */\nexport function wait(time, cb) {\n  return new Promise((resolve => {\n    cb && cb()\n    setTimeout(() => {\n      resolve()\n    }, time)\n  }))\n}\n\n/**\n * 等待异步回调函数执行后才继续往下执行\n * @param thisArg\n * @param fn\n * @param args\n * @returns {Promise<any>}\n */\nexport function until(thisArg, fn, ...args) {\n  return new Promise(resolve => {\n    if (isFunction(fn)) {\n      fn.apply(thisArg, [...args, (...arg) => {\n        resolve(...arg)\n      }])\n    }\n  })\n}\n\nexport function getCookie(key) {\n  let arr = document.cookie.replace(/\\s/g, '').split(';')\n  for (let i = 0; i < arr.length; i++) {\n    let keyAndValuePair = arr[i].split('=')\n    if (keyAndValuePair[0] === key) {\n      return decodeURIComponent(keyAndValuePair[1])\n    }\n  }\n  return ''\n}\n\nexport function setCookie(key, value, timestamps = 0) {\n  let now = new Date()\n  now.setDate(now.getDate() + timestamps)\n  document.cookie += `${key}=${value}`\n}\n\nexport {\n  debounce,\n  throttle,\n  querystring,\n  random\n}\n","/**\n * @Author: MocYang\n * @Email: 958292256@qq.com\n * @Date: 2021/12/26 14:47\n * @File: index.js\n * @Description 模型控制器, 处理模型相关逻辑.(添加,删除,更新,查找)\n */\n\nimport {\n  isFunction,\n  isArray,\n  extend,\n  NOOP\n} from '../../mocyang-utils/src'\n\nclass ModelController {\n  constructor() {\n    this.models = {\n      id: [],\n      // 原始数据和id的映射,用来方便查找\n      data: {\n\n      }\n    }\n  }\n\n  async load(fetchFn, options) {\n    options = extend({\n      // 是否手动发出请求\n      manual: false,\n\n      onSuccess: NOOP,\n\n      onProgress: NOOP\n    }, options)\n\n    if (!isFunction(fetchFn)) {\n      throw new Error('Expected a function to fetch data!')\n    }\n    const self = this\n    return new Promise(async resolve => {\n      const response = await fetchFn()\n      self.cache(response.data)\n      resolve()\n    })\n  }\n\n  // 可以额外添加接口之外的数据\n  add(source) {\n    this.cache(source)\n\n    return this\n  }\n\n  /**\n   * 缓存接口返回的数据.\n   * @param source[Array] 接口返回的数据,数据格式\n   */\n  cache(source) {\n    if (!isArray(source)) {\n      throw new Error('parameter error. not expected type.')\n    }\n    const target = this.models\n    // 缓存时,合并已有的数据,并插入新数据\n    target.id  = Array.from(new Set([...target.id, ...source.map(item => item.id)]))\n    target.data = source.reduce((t, c) => {\n      t[c.id] = c\n      return t\n    }, target.data)\n\n    return this\n  }\n\n  // 返回当前控制器中缓存的所有数据\n  all() {\n    return Object.values(this.models.data)\n  }\n\n  /**\n   * 对所有模型数据进行过滤\n   * @param type 传入的要过滤的函数\n   * @returns {*}\n   */\n  filter (type) {\n    const allModels = this.all()\n\n    if (isFunction(type)) {\n      return allModels.filter(type)\n    }\n  }\n\n  /**\n   * 过滤出室外的模型\n   * @returns {*}\n   */\n  filterOutdoor() {\n    const allModels = this.all()\n    return allModels.filter(m => !m.indoor)\n  }\n\n  /**\n   * 分层过滤模型\n   * @param build{String} 建筑ID: V001JZ0001\n   * @param floor{String} 楼层名: F001\n   * @returns {Array<Object>}\n   */\n  filterIndoor(build, floor) {\n    const allModels  = this.all()\n    // \"V001_JZ0003#F003\" 因为接口数据中的 floor_id 是完整的建筑Id+楼层名, 所以这里进行拼接\n    const floorId = `${build}#${floor}`\n    return allModels.filter(m => m.build_id === build && m.floor_id === floorId)\n  }\n\n  /**\n   * 查找指定ID的数据\n   * @param id\n   * @ret urns {*}\n   */\n  one(id) {\n    return this.models.data[id]\n  }\n\n  /**\n   * 批量添加模型\n   * @param mapV   {Object}\n   * @param source {Array<Object>}\n   * @param size   {Number} 每次最多添加200个。不能再多。多了数据传输会失败。\n   * @param cb     {Function}\n   */\n  batchedAddModel(mapV, source, size = 100, cb) {\n    if (!isArray(source) || size > 200) {\n      return\n    }\n    const start = + new Date()\n    const sourceSize = source.length\n    const addModel = (startOffset, endOffset = 0) => {\n      const sourceSlice = source.slice(startOffset, endOffset)\n      if (startOffset > sourceSize - 1) {\n        setTimeout(() => {\n          const end = + new Date()\n          console.log(`加载 ${sourceSize} 个模型,共耗时: ${(end - start) / 1000}s. `)\n          cb && cb()\n        }, 0)\n        return\n      }\n\n      // 注意,此功能为异步操作\n      mapV.OverLayerCreateObjects(sourceSlice, (res) => {\n        if (startOffset < sourceSize) {\n          setTimeout(() => {\n            addModel(endOffset, endOffset + size)\n          },  10)\n        }\n      })\n    }\n\n    addModel(0, size)\n  }\n}\n\nclass ModelControlManager {\n  constructor() {\n    this.controllers = new Map()\n  }\n\n  create(key) {\n    if (!key) {\n      throw new Error('controller key is required!')\n    }\n    const existController = this.get(key)\n    if (existController) {\n      return existController\n    }\n    const controller = new ModelController()\n    this.controllers.set(key, controller)\n    return this.get(key)\n  }\n\n  get(key) {\n    return this.controllers.get(key)\n  }\n}\n\nexport default new ModelControlManager()\n\n\n"],"names":["parse","url","window","location","href","indexOf","search","substr","substring","lastIndexOf","split","Array","from","reduce","ret","cur","objKeyAndValuePair","value","decodeURIComponent","stringify","url1","params","$c6d85f96ad83478b$export$53b83ca8eaab0383","Object","keys","key","$c6d85f96ad83478b$export$43bee75e5e14138e","acc","push","join","encodeURIComponent","randomColor","Math","random","toString","slice","randomNumber","min","max","floor","pick","valueArr","this","length","$c6d85f96ad83478b$export$5702a91a6f42969f","$c6d85f96ad83478b$export$8b58be045bf06082","assign","$c6d85f96ad83478b$export$830c053460e5ddf6","prototype","hasOwnProperty","$c6d85f96ad83478b$export$1dccc787cc36538b","call","val","isArray","$c6d85f96ad83478b$export$f6e2535fb5126e54","$2a80ed5c00da3b6a$var$ModelController","models","id","data","fetchFn","options","manual","onSuccess","onProgress","Error","self","Promise","async","resolve","response","cache","add","source","source1","target","Set","map","item","t","c","all","values","filter","type","allModels","filterOutdoor","m","indoor","filterIndoor","build","floorId","build_id","floor_id","one","batchedAddModel","mapV","source2","size","cb","start","Date","sourceSize","addModel","startOffset","endOffset","sourceSlice","setTimeout","end","console","log","OverLayerCreateObjects","res","$2a80ed5c00da3b6a$export$2e2bcd8739ae039","controllers","Map","create","existController","get","controller","set","key1"],"version":3,"file":"index.esm.js.map"}