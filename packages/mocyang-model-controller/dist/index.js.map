{"mappings":"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","sources":["packages/mocyang-model-controller/src/index.js","packages/mocyang-utils/src/index.js"],"sourcesContent":["/**\r\n * @Author: MocYang\r\n * @Email: 958292256@qq.com\r\n * @Date: 2021/12/26 14:47\r\n * @File: index.js\r\n * @Description 模型控制器, 处理模型相关逻辑.(添加,删除,更新,查找)\r\n */\r\n\r\nimport { isFunction, isArray } from '../../mocyang-utils/src'\r\n\r\nclass ModelController {\r\n  constructor() {\r\n    this.models = {\r\n      id: [],\r\n      // 原始数据和id的映射,用来方便查找\r\n      data: {\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  async load(fetchFn) {\r\n    if (!isFunction(fetchFn)) {\r\n      throw new Error('Expected a function to fetch data!')\r\n    }\r\n    const self = this\r\n    return new Promise(async resolve => {\r\n      const response = await fetchFn()\r\n      self.cache(response.data)\r\n      resolve()\r\n    })\r\n  }\r\n\r\n  // 可以额外添加接口之外的数据\r\n  add(source) {\r\n    this.cache(source)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 缓存接口返回的数据.\r\n   * @param source[Array] 接口返回的数据,数据格式\r\n   */\r\n  cache(source) {\r\n    if (!isArray(source)) {\r\n      throw new Error('parameter error. not expected type.')\r\n    }\r\n    const target = this.models\r\n    // 缓存时,合并已有的数据,并插入新数据\r\n    target.id  = Array.from(new Set([...target.id, ...source.map(item => item.id)]))\r\n    target.data = source.reduce((t, c) => {\r\n      t[c.id] = c\r\n      return t\r\n    }, target.data)\r\n\r\n    return this\r\n  }\r\n\r\n  // 返回当前控制器中缓存的所有数据\r\n  all() {\r\n    return Object.values(this.models.data)\r\n  }\r\n\r\n  /**\r\n   * 对所有模型数据进行过滤\r\n   * @param type 传入的要过滤的函数\r\n   * @returns {*}\r\n   */\r\n  filter (type) {\r\n    const allModels = this.all()\r\n\r\n    if (isFunction(type)) {\r\n      return allModels.filter(type)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 过滤出室外的模型\r\n   * @returns {*}\r\n   */\r\n  filterOutdoor() {\r\n    const allModels = this.all()\r\n    return allModels.filter(m => !m.indoor)\r\n  }\r\n\r\n  /**\r\n   * 分层过滤模型\r\n   * @param build{String} 建筑ID: V001JZ0001\r\n   * @param floor{String} 楼层名: F001\r\n   * @returns {Array<Object>}\r\n   */\r\n  filterIndoor(build, floor) {\r\n    const allModels  = this.all()\r\n    // \"V001_JZ0003#F003\" 因为接口数据中的 floor_id 是完整的建筑Id+楼层名, 所以这里进行拼接\r\n    const floorId = `${build}#${floor}`\r\n    return allModels.filter(m => m.build_id === build && m.floor_id === floorId)\r\n  }\r\n\r\n  /**\r\n   * 查找指定ID的数据\r\n   * @param id\r\n   * @ret urns {*}\r\n   */\r\n  one(id) {\r\n    return this.models.data[id]\r\n  }\r\n\r\n  /**\r\n   * 批量添加模型\r\n   * @param mapV   {Object}\r\n   * @param source {Array<Object>}\r\n   * @param size   {Number} 每次最多添加200个。不能再多。多了数据传输会失败。\r\n   * @param cb     {Function}\r\n   */\r\n  batchedAddModel(mapV, source, size = 100, cb) {\r\n    if (!isArray(source) || size > 200) {\r\n      return\r\n    }\r\n    const start = + new Date()\r\n    const sourceSize = source.length\r\n    const addModel = (startOffset, endOffset = 0) => {\r\n      const sourceSlice = source.slice(startOffset, endOffset)\r\n      if (startOffset > sourceSize - 1) {\r\n        setTimeout(() => {\r\n          const end = + new Date()\r\n          console.log(`加载 ${sourceSize} 个模型,共耗时: ${(end - start) / 1000}s. `)\r\n          cb && cb()\r\n        }, 0)\r\n        return\r\n      }\r\n\r\n      // 注意,此功能为异步操作\r\n      mapV.OverLayerCreateObjects(sourceSlice, (res) => {\r\n        if (startOffset < sourceSize) {\r\n          setTimeout(() => {\r\n            addModel(endOffset, endOffset + size)\r\n          },  10)\r\n        }\r\n      })\r\n    }\r\n\r\n    addModel(0, size)\r\n  }\r\n}\r\n\r\nclass ModelControlManager {\r\n  constructor() {\r\n    this.controllers = new Map()\r\n  }\r\n\r\n  create(key) {\r\n    if (!key) {\r\n      throw new Error('controller key is required!')\r\n    }\r\n    const existController = this.get(key)\r\n    if (existController) {\r\n      return existController\r\n    }\r\n    const controller = new ModelController()\r\n    this.controllers.set(key, controller)\r\n    return this.get(key)\r\n  }\r\n\r\n  get(key) {\r\n    return this.controllers.get(key)\r\n  }\r\n}\r\n\r\nexport default new ModelControlManager()\r\n\r\n\r\n","/**\r\n * @Author: MocYang\r\n * @Email: 958292256@qq.com\r\n * @Date: 2022/1/6 9:56\r\n * @File: index.js\r\n * @Description\r\n */\r\n\r\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\r\n  ? Object.freeze({})\r\n  : {}\r\n\r\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production')\r\n  ? Object.freeze([])\r\n  : []\r\n\r\nconst NOOP = () => {\r\n}\r\n\r\nconst NO = () => false\r\n\r\nconst extend = Object.assign\r\n\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key)\r\n\r\nexport const objectToString = Object.prototype.toString\r\n\r\nexport const toTypeString = (value) => objectToString.call(value)\r\n\r\nexport const isPlainObject = (val) => toTypeString(val) === '[object Object]'\r\n\r\nexport const isArray = Array.isArray\r\n\r\nexport const isMap = (val) => toTypeString(val) === '[object Map]'\r\n\r\nexport const isSet = (val) => toTypeString(val) === '[object Set]'\r\n\r\nexport const isFunction = (val) => typeof val === 'function'\r\n\r\nexport const isObject = (val) => val !== null && typeof val === 'object'\r\n\r\nexport const isPromise = (val) => {\r\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch)\r\n}\r\n\r\nexport const isData = (val) => val instanceof Date\r\n\r\nexport const isString = (val) => typeof val === 'string'\r\n\r\nexport const isSymbol = (val) => typeof val === 'symbol'\r\n\r\n// extract \"RawType\" from strings like \"[object RawType]\"\r\nexport const toRawType = (val) => toTypeString(val).slice(8, -1)\r\n\r\nexport const toNumber = (val) => {\r\n  const n = parseFloat(val)\r\n  return isNaN(n) ? val : n\r\n}\r\n\r\nexport const trim = (str) => str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '')\r\n"],"names":[],"version":3,"file":"index.js.map"}